{"version":3,"sources":["serviceWorker.js","components/Bio/index.js","components/Posts/index.js","components/Content/index.js","components/Header/index.js","components/App/index.js","index.js","images/headshot.jpg"],"names":["Boolean","window","location","hostname","match","Bio","setDisplayPosts","className","href","onClick","target","rel","icon","faGithubAlt","faLinkedin","faEnvelope","posts","text","url","Posts","map","Content","useState","displayPosts","id","alt","src","headshot","Header","Helmet","name","content","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"+OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iDCbOC,EAAM,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACpB,OACE,yBAAKC,UAAU,uBACb,oDACA,oEACwC,IACtC,uBAAGC,KAAK,sBAAR,oBAFF,WAE4D,IAC1D,4BAAQC,QAAS,kBAAMH,GAAgB,KAAvC,iBAHF,KAKA,uBACEE,KAAK,qCACLE,OAAO,SACPC,IAAI,sBACJJ,UAAU,iBAEV,kBAAC,IAAD,CAAiBK,KAAMC,OAEzB,uBACEL,KAAK,0CACLE,OAAO,SACPC,IAAI,sBACJJ,UAAU,mBAEV,kBAAC,IAAD,CAAiBK,KAAME,OAEzB,uBACEN,KAAK,kCACLE,OAAO,SACPC,IAAI,sBACJJ,UAAU,gBAEV,kBAAC,IAAD,CAAiBK,KAAMG,SClCzBC,EAAQ,CACZ,CACEC,KAAM,0BACNC,IAAK,mDAEP,CACED,KAAM,2CACNC,IAAK,kEAEP,CACED,KAAM,iBACNC,IAAK,2CAIIC,EAAQ,WACnB,OACE,yBAAKZ,UAAU,6BACZS,EAAMI,KAAI,gBAAEF,EAAF,EAAEA,IAAKD,EAAP,EAAOA,KAAP,OACT,4BACE,uBAAGV,UAAU,OAAOC,KAAMU,GAAMD,SCjB7BI,EAAU,WAAO,IAAD,EACaC,oBAAS,GADtB,mBACpBC,EADoB,KACNjB,EADM,KAG3B,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,gBACb,4BACEA,UAAU,mBACVE,QAAS,kBAAMH,GAAgB,KAE/B,yBAAKkB,GAAG,WAAWC,IAAI,eAAeC,IAAKC,OAE5CJ,EAAe,kBAAC,EAAD,MAAY,kBAAC,EAAD,CAAKjB,gBAAiBA,O,QCd7CsB,EAAS,WACpB,OACE,kBAACC,EAAA,EAAD,KACE,+CACA,0BACEC,KAAK,WACLC,QAAQ,yDAEV,0BACED,KAAK,cACLC,QAAQ,2EAEV,0BACED,KAAK,WACLC,QAAQ,oDCbHC,EAAM,WAEjB,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCHNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SNyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBOzI5BC,EAAOC,QAAU,IAA0B,uC","file":"static/js/main.02faae24.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEnvelope } from \"@fortawesome/free-solid-svg-icons\";\nimport { faGithubAlt, faLinkedin } from \"@fortawesome/free-brands-svg-icons\";\n\nexport const Bio = ({ setDisplayPosts }) => {\n  return (\n    <div className=\"text fade-in-upward\">\n      <h1>Hi, I'm Dan Frenette</h1>\n      <h2>\n        I'm a Full-Stack Software Engineer at{\" \"}\n        <a href=\"https://thegnar.co\">The Gnar Company</a>. I also{\" \"}\n        <button onClick={() => setDisplayPosts(true)}>love to write</button>.\n      </h2>\n      <a\n        href=\"https://www.github.com/danfrenette\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"social github\"\n      >\n        <FontAwesomeIcon icon={faGithubAlt} />\n      </a>\n      <a\n        href=\"https://www.linkedin.com/in/danfrenette\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"social linkedin\"\n      >\n        <FontAwesomeIcon icon={faLinkedin} />\n      </a>\n      <a\n        href=\"mailto:dan.r.frenette@gmail.com\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"social email\"\n      >\n        <FontAwesomeIcon icon={faEnvelope} />\n      </a>\n    </div>\n  );\n};\n","import React from \"react\";\n\nconst posts = [\n  {\n    text: \"Useful Sidekiq Patterns\",\n    url: \"https://blog.thegnar.co/useful-sidekiq-patterns\"\n  },\n  {\n    text: \"Tell Don't Ask: Benefits and Limitations\",\n    url: \"https://blog.thegnar.co/tell-dont-ask-benefits-and-limitations\"\n  },\n  {\n    text: \"PRY like a PRO\",\n    url: \"https://blog.thegnar.co/PRY-like-a-PRO\"\n  }\n];\n\nexport const Posts = () => {\n  return (\n    <div className=\"text fade-in-upward posts\">\n      {posts.map(({url, text}) => (\n        <h2>\n          <a className=\"post\" href={url}>{text}</a>\n        </h2>\n      ))}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport headshot from \"../../images/headshot.jpg\";\nimport { Bio } from \"../Bio\";\nimport { Posts } from \"../Posts\";\n\nexport const Content = () => {\n  const [displayPosts, setDisplayPosts] = useState(false);\n\n  return (\n    <div className=\"main\">\n      <div className=\"text-wrapper\">\n        <button\n          className=\"headshot-wrapper\"\n          onClick={() => setDisplayPosts(false)}\n        >\n          <img id=\"headshot\" alt=\"Dan Frenette\" src={headshot} />\n        </button>\n        {displayPosts ? <Posts /> : <Bio setDisplayPosts={setDisplayPosts} />}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nexport const Header = () => {\n  return (\n    <Helmet>\n      <title>Dan Frenette</title>\n      <meta\n        name=\"viewport\"\n        content=\"width=device-width, initial-scale=1, maximum-scale=1\"\n      />\n      <meta\n        name=\"description\"\n        content=\"The website for a plucky kid who can write words and code pretty well.\"\n      />\n      <meta\n        name=\"keywords\"\n        content=\"Dan Frenette, Rails, React, Boston, Developer\"\n      />\n    </Helmet>\n  );\n};\n","import React from \"react\";\nimport { Content } from \"../Content\";\nimport { Header } from \"../Header\";\n\nexport const App = () => {\n\n  return (\n    <>\n      <Header />\n      <Content />\n    </>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { App } from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/headshot.6e8ee4c6.jpg\";"],"sourceRoot":""}